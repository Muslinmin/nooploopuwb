%% Real-Time Weighted Least Squares Visualization for Underground Carpark

figure;
hold on;
axis equal;
grid on;

% Set plot limits to simulate the carpark boundaries
xlim([-11, 10]);  % Adjust as needed for carpark dimensions
ylim([-11, 10]);  

% Draw the pillars in the carpark
fill([2, 3, 3, 2], [2, 2, 3, 3], 'g', 'FaceAlpha', 0.3);  % Pillar1
fill([2, 2, 3, 3], [7, 8, 8, 7], 'g', 'FaceAlpha', 0.3);  % Pillar2
fill([7, 7, 8, 8], [7, 8, 8, 7], 'g', 'FaceAlpha', 0.3);  % Pillar3
fill([7, 7, 8, 8], [2, 3, 3, 2], 'g', 'FaceAlpha', 0.3);  % Pillar4

% Plot fixed anchor positions
anchorCoordinates = [0, 0; 0.175, 11.22; 9.388, 11.26; 9.308, 0];  
for i = 1:size(anchorCoordinates, 1)
    plot(anchorCoordinates(i, 1), anchorCoordinates(i, 2), 'bo', 'MarkerSize', 8, 'DisplayName', ['Anchor ', num2str(i)]);
end

% Initialize the plot for the car position and orientation
tagPositionPlot = plot(NaN, NaN, 'rx', 'MarkerSize', 10, 'LineWidth', 2, 'DisplayName', 'Estimated Tag Position');

% Load the car icon image
carImage = imread('car.png');  % Load the provided car image


% Get the aspect ratio of the image
[imgHeight, imgWidth, ~] = size(carImage);
aspectRatio = imgWidth / imgHeight;

% Desired width of the car image in plot units
desiredWidth = 2;  % Adjust this to scale the car icon as needed
desiredHeight = desiredWidth / aspectRatio;  % Scale height based on aspect ratio

% Initial display of the car image (centered and scaled based on aspect ratio)
carImagePlot = imshow(carImage, 'XData', [-desiredWidth/2, desiredWidth/2], ...
                                'YData', [-desiredHeight/2, desiredHeight/2]);


% Define the serial port and settings
if ~isempty(instrfind)
    fclose(instrfind);
    delete(instrfind);
end

% Set up the serial port connection with higher baud rate and continuous read mode
s = serial('COM5', 'BaudRate', 115200);% 'InputBufferSize', 1024, 'ReadAsyncMode', 'continuous'); 
fopen(s);

% Infinite loop for real-time position and orientation updates
while true
    % Fetch or update the latest tag data
    [tagCoordinates, anchorData, pitchRoll] = ExtractAnchorAndTagInfo(s);

    % Use tag coordinates as the estimated tag position
    tagPosition = tagCoordinates

    % Update the position of the tag on the plot
    set(tagPositionPlot, 'XData', tagPosition(1), 'YData', tagPosition(2));
    
    % Rotate the square representing the car based on pitch or roll data
    orientationAngle = deg2rad(pitchRoll(1));  % Convert pitch to radians for yaw simulation
    rotationMatrix = [cos(orientationAngle), -sin(orientationAngle); 
                      sin(orientationAngle), cos(orientationAngle)];


    % Rotate the image and alpha channel based on pitch or roll (simulating yaw)
    rotatedCarImage = imrotate(carImage, -pitchRoll(1), 'bilinear', 'crop');
    rotatedCarAlpha = imrotate(carAlpha, -pitchRoll(1), 'bilinear', 'crop');

    % Update the car image position based on tag position
    set(carImagePlot, 'XData', [tagPosition(1)-desiredWidth/2, tagPosition(1)+desiredWidth/2], ...
                      'YData', [tagPosition(2)-desiredHeight/2, tagPosition(2)+desiredHeight/2]);


    % Shortened pause for faster updates
    pause(0.01);  % Adjust as needed for smoother or faster updates
end
