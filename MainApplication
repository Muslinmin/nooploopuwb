%% Real-Time Weighted Least Squares Visualization for Underground Carpark

figure;
hold on;
axis equal;
grid on;

% Set plot limits to simulate the carpark boundaries
xlim([-5, 14]);  % Adjust as needed for carpark dimensions
ylim([-3, 20]);  

% Draw the pillars in the carpark
fill([2, 3, 3, 2], [2, 2, 3, 3], 'g', 'FaceAlpha', 0.3);  % Pillar1
fill([2, 2, 3, 3], [7, 8, 8, 7], 'g', 'FaceAlpha', 0.3);  % Pillar2
fill([7, 7, 8, 8], [7, 8, 8, 7], 'g', 'FaceAlpha', 0.3);  % Pillar3
fill([7, 7, 8, 8], [2, 3, 3, 2], 'g', 'FaceAlpha', 0.3);  % Pillar4

% Plot fixed anchor positions
anchorCoordinates = [0, 0; 0.175, 11.22; 9.388, 11.26; 9.308, 0];  
for i = 1:size(anchorCoordinates, 1)
    plot(anchorCoordinates(i, 1), anchorCoordinates(i, 2), 'bo', 'MarkerSize', 8, 'DisplayName', ['Anchor ', num2str(i)]);
end

% Initialize the plot for the car position and orientation
tagPositionPlot = plot(NaN, NaN, 'rx', 'MarkerSize', 10, 'LineWidth', 2, 'DisplayName', 'Estimated Tag Position');

% Load the car icon image
[carImage, ~, carAlpha] = imread('car.png');  % Load the provided car image with alpha

% Desired width and height of the car in plot units
desiredWidth = 2;  % Adjust as needed for car size
desiredHeight = desiredWidth / (size(carImage, 2) / size(carImage, 1));  % Maintain aspect ratio

% Display the car image at an initial position (e.g., center of the plot)
carImagePlot = image('CData', carImage, 'XData', [0, desiredWidth], 'YData', [0, desiredHeight]);
set(carImagePlot, 'AlphaData', carAlpha);  % Apply transparency if available

% Define the serial port and settings
if ~isempty(instrfind)
    fclose(instrfind);
    delete(instrfind);
end

% Set up the serial port connection with higher baud rate and continuous read mode
s = serial('COM5', 'BaudRate', 115200); %'InputBufferSize', 1024, 'ReadAsyncMode', 'continuous'); 
fopen(s);

% Infinite loop for real-time position updates
while true
    % Fetch or update the latest tag data
    [tagCoordinates, anchorData, pitchRoll] = ExtractAnchorAndTagInfo(s);
    tagPosition = tagCoordinates;

    % Update the car image position based on tag position (no rotation for now)
    set(carImagePlot, 'XData', [tagPosition(1)-desiredWidth/2, tagPosition(1)+desiredWidth/2], ...
                      'YData', [tagPosition(2)-desiredHeight/2, tagPosition(2)+desiredHeight/2]);

    % Update the position of the tag on the plot
    set(tagPositionPlot, 'XData', tagPosition(1), 'YData', tagPosition(2));

    % Shortened pause for faster updates
    pause(0.01);  % Adjust as needed for smoother or faster updates
end
